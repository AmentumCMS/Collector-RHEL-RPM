name: RHEL-RPM-Collection (Full)
run-name: ${{ github.actor }} is Collecting All the RPMS ðŸš€
on:
  push:
    branches:
      - full
  schedule:
    - cron: "0 0 1 1,4,7,10 *" # Update Quarterly on the 1st
  workflow_dispatch:

jobs:
  Date:
    runs-on: ubuntu-24.04
    outputs:
      Date: ${{ steps.date.outputs.date }}
    steps:
      - name: Get current date
        id: DATE
        run: |
          echo "Setting Date"
          echo "DATE=$(date '+%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
          echo -e "\nWrote to file:\n$GITHUB_OUTPUT\n"
          echo "Values:"
          cat $GITHUB_OUTPUT

      - name: Get disk space
        id: DISK  
        run: |
          df -h
          echo -e "\nDisk List"
          sudo fdisk -l | grep -i disk
          echo -e "\nPermissions on /mnt"
          ls -alht /mnt

  Collect-RPMs:
    needs: [Date]
    runs-on: linux-300G
    strategy:
        max-parallel: 1
        matrix:
            os: [8]
            # os: [8, 9]
            repo: [rhel-matrix-for-x86_64-baseos-rpms]
            # repo: [rhel-matrix-for-x86_64-baseos-rpms, rhel-matrix-for-x86_64-appstream-rpms, codeready-builder-for-rhel-matrix-x86_64-rpms, epel, docker-ce-stable]
    container:
      image: docker.io/redhat/ubi${{ matrix.os }}
      env:
        GH_TOKEN: ${{ github.token }}
      volumes:
        - /mnt:/mnt
      # credentials:
      #   username: ${{ secrets.REGISTRY_USER }}
      #   password: ${{ secrets.REGISTRY_TOKEN }}
      # ports:
      #   - 80

    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
      
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Show Files
        run: ls -Alht

      - name: List disks
        run: df -h /mnt

      - name: Register system and install packages
        run: |
          rm /etc/rhsm-host
          subscription-manager register --username '${{ secrets.RHDN_USER }}' --password '${{ secrets.RHDN_PASS }}'
          dnf install -y dnf-plugins-core yum-utils mkisofs isomd5sum tree procps-ng
          echo "Registering epel Repo"
          dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-${{ matrix.os }}.noarch.rpm
          echo "Registering docker-ce-stable Repo"
          dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo

      - name: Set Dynamic Repo Names
        id: set_repo
        run: |
          export REPO=${{ matrix.repo }}
          REPO=${REPO/matrix/${{ matrix.os }}}
          echo -e "\nWorking on repo $REPO\n"
          echo "REPO=$REPO" >> $GITHUB_ENV
          echo "Build short repo name"
          case $REPO in
            *"baseos"*) SHORT_REPO="BaseOS${{ matrix.os }}" ;;
            *"appstream"*) SHORT_REPO="AppStream${{ matrix.os }}" ;;
            *"codeready-builder"*) SHORT_REPO="CRB${{ matrix.os }}" ;;
            *"epel"*) SHORT_REPO="EPEL${{ matrix.os }}" ;;
            *"docker-ce-stable"*) SHORT_REPO="Docker${{ matrix.os }}" ;;
          esac
          echo "SHORT_REPO=$SHORT_REPO"
          echo "SHORT_REPO=$SHORT_REPO" >> $GITHUB_ENV

      - name: Run Collection for ${{ env.REPO }}
        run: |
          echo "Collecting repo ${{ env.REPO }} RPMs"
          ./reposync-all.sh ${{ env.REPO }}
          ls *.log

      - name: Upload reposync log
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.log
          path: ${{ env.REPO }}.log
          if-no-files-found: error

      - name: Unregister system
        run: subscription-manager unregister

      - name: Show Consumption
        run: |
          echo -e "Disk Usage:\n$(du -chs /mnt/${{ env.REPO }})\n"
          echo -e "Disk Space:\n$(df -h /mnt/)"

      # - name: Copy README to ${{ env.REPO }} ISO
      #   run: cp -v README.md /mnt/${{ env.REPO }}/

      - name: ISO Table of contents
        run: |
          cd /mnt
          tree ${{ env.REPO }} \
            | tee ${{ env.REPO }}/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt

      - name: Upload ISO ToC artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt
          path: /mnt/${{ env.REPO }}/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt
          if-no-files-found: error

      - name: Make ${{ env.REPO }} ISO
        run: |
          cd /mnt/${{ env.REPO }}
          echo -e "Calculating chunks"
          find . -type f | split -b 8500M -d -a 3 - "chunk_"
          iso_count=0
          current_iso_size=0

          echo -e "Creating ISO ${iso_count}"
          iso_file="../${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}_${iso_count}.iso"
          
          # Create an empty ISO to start with
          mkisofs -o "$iso_file" -J -R /dev/null  \
            -V ${{ env.SHORT_REPO }}-${iso_count}-${{ needs.Date.outputs.Date }} \
            -A ${{ env.SHORT_REPO }}-${iso_count}-${{ needs.Date.outputs.Date }}
          
          echo -e "Filling ISO with chunks"
          for chunk in chunk_*; do
            tar_chunk="$chunk.tar.gz"
            tar -czf "$tar_chunk" --remove-files "$chunk"
            tar_chunk_size=$(du -b "$tar_chunk" | cut -f1)
            echo -e "Chunk $tar_chunk is $tar_chunk_size bytes"
            if (( current_iso_size + tar_chunk_size > 50000M )); then
              echo -e "Next chunk will exceed 50GB. Closing current ISO"
              echo -e "Implanting MD5"
              implantisomd5 "$iso_file"
              echo -e "Calculating SHA256"
              sha256sum -b "$iso_file" | tee "$iso_file.sha"
              iso_count=$((iso_count + 1))
              echo -e "Creating next ISO: ${iso_count}"
              current_iso_size=0
              iso_file="../${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}_${iso_count}.iso"
              # Create a new empty ISO
              mkisofs -o "$iso_file" -J -R /dev/null  \
                -V ${{ env.SHORT_REPO }}-${iso_count}-${{ needs.Date.outputs.Date }} \
                -A ${{ env.SHORT_REPO }}-${iso_count}-${{ needs.Date.outputs.Date }}
            fi
            echo -e "Adding $tar_chunk to $iso_file"
            mkisofs -M "$iso_file" -o "$iso_file" -J -R "$tar_chunk"
            rm "$tar_chunk"
            current_iso_size=$((current_iso_size + tar_chunk_size))
            echo -e "Free Disk Space: $(df -h /mnt | awk 'NR==2 {print $4}')"
          done

          echo -e "Closing Final ISO"
          implantisomd5 "$iso_file"
          echo -e "Calculating SHA256"
              sha256sum -b "$iso_file" | tee "$iso_file.sha"
          echo "Done making $iso_count ISOs of ${{ env.REPO }}"

      - name: Show ISO & Hash
        run: ls -sS1h /mnt/*.iso*

      - name: Upload ISO SHA artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.sha
          path: /mnt/*.sha
          if-no-files-found: error

      - name: Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}
          path: /mnt/*.iso
          if-no-files-found: error

      # - name: Send ISO artifacts to Sharepoint
      #   uses: amentumcms/sharepoint-file-upload-action@pappasjfed-patch-1
      #   with:
      #     file_path: "/mnt/*.iso*"
      #     host_name: "${{ secrets.SHAREPOINT_HOST }}"
      #     site_name: "${{ secrets.SHAREPOINT_SITE }}"
      #     upload_path: "${{ secrets.SHAREPOINT_BASEPATH }}/${{ vars.COLLECTOR }}/${{ needs.Date.outputs.Date }}-Full"
      #     tenant_id: ${{ secrets.SHAREPOINT_TENANT_ID }}
      #     client_id: ${{ secrets.SHAREPOINT_APP_ID }}
      #     client_secret: ${{ secrets.SHAREPOINT_APP_SECRET }}
      #     login_endpoint: "login.microsoftonline.us"
      #     graph_endpoint: "graph.microsoft.us"

      # Cleanup
      - name: Clean up
        run: |
          echo "Remove ${{ env.REPO }}"
          rm -rf /mnt/${{ env.REPO }}
          echo "Remove Artifacts"
          rm -rfv /mnt/*.iso
          rm -rfv /mnt/*.iso.sha
          rm -rfv /mnt/*.iso.txt
          echo "Done"

  # Release:
  #   runs-on: ubuntu-24.04
  #   needs: [Date, Collect-RPMs]
  #   permissions:
  #     contents: write
  #     pull-requests: read
  #   env:
  #     GH_TOKEN: ${{ github.token }}
  #   steps:
  #     - name: Check out repository code
  #       uses: actions/checkout@v4

  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         merge-multiple: true
  #         pattern: "*.iso.*"

  #     - name: Show Artifacts
  #       run: ls -sS1h *.iso.*

  #     # Section to actually create a release
  #     - name: Set up git
  #       run: |
  #         git config user.name "$(git log -n 1 --pretty=format:%an)"
  #         git config user.email "$(git log -n 1 --pretty=format:%ae)"

  #     - name: Create tag
  #       uses: rickstaa/action-create-tag@v1
  #       id: tag_create
  #       with:
  #         tag: ${{ needs.Date.outputs.Date }}-Full
  #         github_token: ${{secrets.GITHUB_TOKEN}}
  #         tag_exists_error: false
  #         message: "Release for ${{ needs.Date.outputs.Date }} Full run"

  #     - name: Create Release
  #       id: create_release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         name: ${{ vars.COLLECTOR }}-Full ${{ needs.Date.outputs.Date }}
  #         tag_name: ${{ needs.Date.outputs.Date }}-Full
  #         make_latest: true
  #         files: |
  #           /mnt/*.iso.*
