name: RHEL-RPM-Collection (Branch)
run-name: ${{ github.actor }} is Collecting New RPMs for ${{ github.ref_name }} ðŸš€
on:
  push:
    branches-ignore:
      - main
      - full
  release:
    types: [edited, released]
  workflow_dispatch:

jobs:
  Date:
    runs-on: ubuntu-24.04
    outputs:
      Date: ${{ steps.date.outputs.date }}
    steps:
      - name: Get current date
        id: DATE
        run: |
          echo "Setting Date"
          echo "DATE=$(date '+%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
          echo -e "\nWrote to file:\n$GITHUB_OUTPUT\n"
          echo "Values:"
          cat $GITHUB_OUTPUT

      - name: Get disk space
        id: DISK  
        run: |
          echo -e "\nUser ID:\n$(id)"
          df -h
          echo -e "\nDisk List"
          sudo fdisk -l | grep -i disk
          echo -e "\nPermissions on /mnt"
          ls -alht /mnt

  Collect-RPMs:
    needs: [Date]
    runs-on: ubuntu-24.04
    strategy:
        # max-parallel: 1
        matrix:
          os: [8, 9]
          repo: [rhel-matrix-for-x86_64-baseos-rpms, docker-ce-stable]
          # repo: [rhel-matrix-for-x86_64-baseos-rpms, rhel-matrix-for-x86_64-appstream-rpms, codeready-builder-for-rhel-matrix-x86_64-rpms, epel, docker-ce-stable, hashicorp]
    container:
      image: docker.io/redhat/ubi${{ matrix.os }}
      env:
        GH_TOKEN: ${{ github.token }}
        WORKDIR: /mnt
      volumes:
        - /mnt:/mnt
      # credentials:
      #   username: ${{ secrets.REGISTRY_USER }}
      #   password: ${{ secrets.REGISTRY_TOKEN }}
      # ports:
      #   - 80

    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
      
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Show Files
        run: ls -Alht

      - name: List disks
        run: df -h ${{ env.WORKDIR }}

      - name: Setup Environment
        run: |
          echo "PATH=$PATH:$PWD/scripts" >> $GITHUB_ENV
          echo "WORKDIR=/mnt" >> $GITHUB_ENV

      - name: Register system and install packages
        run: registerubi.sh '${{ secrets.RHDN_USER }}' '${{ secrets.RHDN_PASS }}'

      - name: Set Dynamic Repo Names
        id: set_repo
        run: |
          export REPO=${{ matrix.repo }}
          REPO=${REPO/matrix/${{ matrix.os }}}
          echo -e "\nWorking on repo $REPO\n"
          echo "REPO=$REPO" >> $GITHUB_ENV
          echo "Build short repo name"
          case $REPO in
            *"baseos"*) SHORT_REPO="BaseOS${{ matrix.os }}" ;;
            *"appstream"*) SHORT_REPO="AppStream${{ matrix.os }}" ;;
            *"codeready-builder"*) SHORT_REPO="CRB${{ matrix.os }}" ;;
            *"epel"*) SHORT_REPO="EPEL${{ matrix.os }}" ;;
            *"docker-ce-stable"*) SHORT_REPO="Docker${{ matrix.os }}" ;;
          esac
          echo "SHORT_REPO=$SHORT_REPO"
          echo "SHORT_REPO=$SHORT_REPO" >> $GITHUB_ENV

      - name: Run Collection for ${{ env.REPO }}
        run: |
          cd ${{ env.WORKDIR }}
          echo "Collecting repo ${{ env.REPO }} RPMs"
          reposync.sh ${{ env.REPO }}
          ls *.log

      - name: Upload reposync log
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.log
          path: ${{ env.WORKDIR }}/${{ env.REPO }}.log
          if-no-files-found: error

      - name: Unregister system
        run: subscription-manager unregister

      - name: Show Consumption
        run: |
          echo -e "Disk Usage $(du -chs ${{ env.WORKDIR }}/${{ env.REPO }})\n"
          echo -e "Disk Space $(df -h ${{ env.WORKDIR }}/)"

      # - name: Copy README to ${{ env.REPO }} ISO
      #   run: cp -v README.md ${{ env.WORKDIR }}/${{ env.REPO }}/

      - name: ISO Table of contents
        run: |
          cd ${{ env.WORKDIR }}
          tree ${{ env.REPO }} \
            | tee ${{ env.REPO }}/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt

      - name: Upload ISO ToC artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt
          path: ${{ env.WORKDIR }}/${{ env.REPO }}/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt
          if-no-files-found: error

      - name: Make ${{ env.REPO }} ISO
        run: |
          cd ${{ env.WORKDIR }}
          echo "Making ISO of ${{ env.REPO }}"
          mkisofs -J -R -v -T -l \
            -V ${{ env.SHORT_REPO }}-${{ needs.Date.outputs.Date }} \
            -A ${{ env.SHORT_REPO }}-${{ needs.Date.outputs.Date }} \
            -o ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso \
            ${{ env.REPO }}

      - name: Implant MD5 sum into ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso
        run: implantisomd5 /mnt/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso

      - name: Generate ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso Hash
        run: |
          cd ${{ env.WORKDIR }}
          sha256sum -b ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso | tee \
            ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.sha

      - name: Show ISO & Hash
        run: ls -sS1h ${{ env.WORKDIR }}/*.iso*

      - name: Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso
          path: ${{ env.WORKDIR }}/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso
          if-no-files-found: error

      - name: Upload ISO Hash
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.sha
          path: ${{ env.WORKDIR }}/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.sha

      # Cleanup
      - name: Clean up
        run: |
          cd ${{ env.WORKDIR }}
          echo "Remove ${{ env.REPO }}"
          rm -rf ${{ env.REPO }}
          echo "Remove Artifacts"
          rm -rfv ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso
          rm -rfv ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.sha
          rm -rfv ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt
          echo "Done"

  Release:
    runs-on: ubuntu-24.04
    needs: [Date, Collect-RPMs, Sharepoint]
    permissions:
      contents: write
      pull-requests: read
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: "*.iso.*"

      - name: Show Artifacts
        run: ls -sS1h *.iso.*

      # Section to actually create a release

  # Upload to Sharepoint Job
  Sharepoint:
    runs-on: ubuntu-24.04
    needs: [Date, Collect-RPMs]
    strategy:
      matrix:
          os: [8, 9]
          # repo: [rhel-matrix-for-x86_64-baseos-rpms, rhel-matrix-for-x86_64-appstream-rpms, codeready-builder-for-rhel-matrix-x86_64-rpms, epel, docker-ce-stable]
          repo: [rhel-matrix-for-x86_64-baseos-rpms, docker-ce-stable]
    permissions:
      contents: write
      pull-requests: read
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Set Dynamic Repo Names
        id: set_repo
        run: |
          export REPO=${{ matrix.repo }}
          REPO=${REPO/matrix/${{ matrix.os }}}
          echo -e "\nWorking on repo $REPO\n"
          echo "REPO=$REPO" >> $GITHUB_ENV
          echo "Build short repo name"
          case $REPO in
            *"baseos"*) SHORT_REPO="BaseOS${{ matrix.os }}" ;;
            *"appstream"*) SHORT_REPO="AppStream${{ matrix.os }}" ;;
            *"codeready-builder"*) SHORT_REPO="CRB${{ matrix.os }}" ;;
            *"epel"*) SHORT_REPO="EPEL${{ matrix.os }}" ;;
            *"docker-ce-stable"*) SHORT_REPO="Docker${{ matrix.os }}" ;;
          esac
          echo "SHORT_REPO=$SHORT_REPO"
          echo "SHORT_REPO=$SHORT_REPO" >> $GITHUB_ENV

      - name: Create upload directory
        run: |
          echo "Create mnt directory and bindmount"
          echo -e "\nUser ID:\n$(id)"
          mkdir -p mnt
          sudo mount --bind -o umask=022,gid=118,uid=1001 /mnt mnt
          echo -e "\nFile Listing\n$(ls -alht mnt)"
          sudo chown -R runner:docker mnt
          echo -e "\nFile Listing\n$(ls -alht mnt)"
            
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: "${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso*"
          path: mnt

      - name: List Artifacts
        run: |
          echo -e "\nDisk mounts:\n$(df -h|grep mnt)"
          echo -e "\nFile Listing:\n$(ls -1sSh mnt/*.iso*)"

      # Send Artifacts to Sharepoint
