name: RHEL-RPM-Collection
run-name: ${{ github.actor }} is Collecting Images ðŸš€
on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * 1" # Update weekly on Monday Midnight
  workflow_dispatch:

jobs:
  Date:
    runs-on: ubuntu-24.04
    outputs:
      Date: ${{ steps.date.outputs.date }}
    steps:
      - name: Get current date
        id: DATE
        run: |
          echo "Setting Date"
          echo "DATE=$(date '+%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
          echo -e "\nWrote to file:\n$GITHUB_OUTPUT\n"
          echo "Values:"
          cat $GITHUB_OUTPUT

      - name: Get disk space
        id: DISK  
        run: |
          df -h
          echo -e "\nDisk List"
          sudo fdisk -l | grep -i disk

  Collect-RPMs:
    needs: [Date]
    runs-on: ubuntu-24.04
    strategy:
        max-parallel: 1
        matrix:
            os: [8, 9]
            repo: [rhel-matrix-for-x86_64-baseos-rpms, rhel-matrix-for-x86_64-appstream-rpms, codeready-builder-for-rhel-matrix-x86_64-rpms, epel, docker-ce-stable]
    container:
      image: docker.io/redhat/ubi${{ matrix.os }}
      env:
        GH_TOKEN: ${{ github.token }}
      volumes:
        - /mnt:/mnt
      # credentials:
      #   username: ${{ secrets.REGISTRY_USER }}
      #   password: ${{ secrets.REGISTRY_TOKEN }}
      # ports:
      #   - 80

    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
      
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Show Files
        run: |
          chmod a+x reposync.sh 
          ls -Alht

      - name: List disks
        run: df -h /mnt

      - name: Register system and install packages
        run: |
          rm /etc/rhsm-host
          subscription-manager register --username '${{ secrets.RHDN_USER }}' --password '${{ secrets.RHDN_PASS }}'
          dnf install -y dnf-plugins-core yum-utils mkisofs isomd5sum tree procps-ng
          echo "Registering epel Repo"
          dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-${{ matrix.os }}.noarch.rpm
          echo "Registering docker-ce-stable Repo"
          dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo

      - name: Set Dynamic Repos
        id: set_repo
        run: |
          export REPO=${{ matrix.repo }}
          REPO=${REPO/matrix/${{ matrix.os }}}
          echo -e "\nWorking on repo $REPO\n"
          echo "REPO=$REPO" >> $GITHUB_ENV

      - name: Run Collection for ${{ env.REPO }}
        run: |
          echo -e "\Collecting repo ${{ env.REPO }}\n"
          echo "Collecting ${{ env.REPO }} RPMs"
          ./reposync.sh ${{ env.REPO }}
          ls *.log

      - name: Upload reposync log
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.log
          path: ${{ env.REPO }}.log
          if-no-files-found: error

      - name: Unregister system
        run: subscription-manager unregister

      - name: Show Consumption
        run: |
          echo -e "Disk Usage $(du -chs /mnt/${{ env.REPO }})\n"
          echo -e "Disk Space $(df -h /mnt/)"

      # - name: Copy README to ${{ env.REPO }} ISO
      #   run: cp -v README.md /mnt/${{ env.REPO }}/

      - name: ISO Table of contents
        run: |
          tree /mnt/${{ env.REPO }} \
            | tee /mnt/${{ env.REPO }}/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt

      - name: Upload ISO ToC artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt
          path: /mnt/${{ env.REPO }}/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt
          if-no-files-found: error

      - name: Make ${{ env.REPO }} ISO
        run: |
          echo "Making ISO of ${{ env.REPO }}"
          mkisofs -J -R -v -T -l \
            -V ${{ env.REPO }}-${{ needs.Date.outputs.Date }} \
            -A ${{ env.REPO }}-${{ needs.Date.outputs.Date }} \
            -o /mnt/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso \
            /mnt/${{ env.REPO }}

      - name: Implant MD5 sum into ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso
        run: implantisomd5 /mnt/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso

      - name: Generate ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso Hash
        run: |
          sha256sum -b /mnt/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso | tee \
            /mnt/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.sha

      - name: Show ISO & Hash
        run: ls -Alh /mnt/*.iso*

      - name: Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso
          path: /mnt/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso
          if-no-files-found: error

      - name: Upload ISO Hash
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.sha
          path: /mnt/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.sha

      # Send artifact to sharepoint
      - name: Send ${{ env.REPO }} ISO artifacts to Sharepoint
        uses: amentumcms/sharepoint-file-upload-action@main
        with:
          file_path: "/mnt/*.iso*"
          host_name: "${{ secrets.SHAREPOINT_HOST }}"
          site_name: "${{ secrets.SHAREPOINT_SITE }}"
          upload_path: "${{ secrets.SHAREPOINT_BASEPATH }}/${{ vars.COLLECTOR }}/${{ needs.Date.outputs.Date }}"
          tenant_id: ${{ secrets.SHAREPOINT_TENANT_ID }}
          client_id: ${{ secrets.SHAREPOINT_APP_ID }}
          client_secret: ${{ secrets.SHAREPOINT_APP_SECRET }}
          login_endpoint: "login.microsoftonline.us"
          graph_endpoint: "graph.microsoft.us"

      # Cleanup
      - name: Clean up
        run: |
          echo "Remove ${{ env.REPO }}"
          rm -rf /mnt/${{ env.REPO }}
          echo "Remove Artifacts"
          rm -rfv /mnt/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso
          rm -rfv /mnt/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.sha
          rm -rfv /mnt/${{ env.REPO }}-${{ matrix.os }}-${{ needs.Date.outputs.Date }}.iso.txt
          echo "Done"