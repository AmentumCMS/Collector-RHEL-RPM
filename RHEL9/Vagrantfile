# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/rhel9"
  config.vm.hostname = "reposync-RHEL9"

  # config.vagrant.plugins = ["vagrant-vbguest","vagrant-persistent-storage"]
  config.vagrant.plugins = ["vagrant-vbguest"]
  config.vbguest.auto_update = false
  config.ssh.key_type = :ecdsa521 # Requires Vagrant 2.4.1

  ############################################################################
  # Provider-specific configuration                                          #
  ############################################################################
  config.vm.provider "virtualbox" do |vb|
    # Set Name
    vb.name = "RepoSync - RHEL9"

    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
    
    # Customize CPU & Memory
    vb.cpus = 4
    vb.memory = 8192
    
    # Set up VM options
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    vb.customize ["modifyvm", :id, "--vm-process-priority", "normal"]
    vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
    vb.customize ["modifyvm", :id, "--usbxhci", "on"]
    vb.customize ["modifyvm", :id, "--audioin", "on"]
    vb.customize ["modifyvm", :id, "--audiocontroller", "hda"]
    vb.customize ["modifyvm", :id, "--vrde", "off"]
  end

  ############################################################################
  # File copy provisioners                                                   #
  ############################################################################
  config.vm.provision "file", source: "~/.ssh", destination: ".ssh"
  config.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"
  config.vm.provision "file", source: "../scripts", destination: "scripts"
  config.vm.provision "file", source: "../tanzu-cli.repo", destination: "tanzu-cli.repo"

  config.vm.synced_folder ".", "/vagrant", disabled: false

  ############################################################################
  # Shell script provisioner                                                 #
  ############################################################################
  config.vm.provision "shell", 
    env: {
      RHDN_USER: ENV['RHDN_USER'],
      RHDN_PASS: ENV['RHDN_PASS'].gsub('$', '\$'),
    }, reboot: true, inline: <<-'SHELL'
    # env|grep RHDN
    # Import .ssh to vagrant user
    echo "Setting up Vagrant User SSH"
    cat /home/vagrant/.ssh/*.pub | tee -a /home/vagrant/authorized_keys
    chown -R vagrant:vagrant /home/vagrant
    chmod -R 600 /home/vagrant/.ssh
    chmod 700 /home/vagrant/.ssh

    echo -e "\nCopying scripts to /usr/local/bin"
    cp -rv /home/vagrant/scripts/* /usr/local/bin/
    chmod a+x /usr/local/bin/*

    # Setup Rootless Podman
    echo -e "\nSetting up Rootless Podman"
    sysctl user.max_user_namespaces=15000
    sed -i 's/user.max_user_namespaces=0/user.max_user_namespaces=15000/i' /etc/sysctl.conf
    usermod --add-subuids 200000-201000 --add-subgids 200000-201000 vagrant
    groupadd -r docker
    usermod -aG docker vagrant
    mkdir /etc/containers
    touch /etc/containers/nodocker

    ############################################################################
    # Add Software                                                             #
    ############################################################################
    if [[ -z $RHDN_USER ]] && [[ -z $RHDN_PASS ]]; then
      echo -e "\nRHDN Credentials undefined, will not be attached"
    else
      echo -e "\nRHDN Credentials detected, attaching to RHDN"
      subscription-manager register \
        --username ${RHDN_USER} \
        --password ${RHDN_PASS} \
        --autosubscribe --force

      if [[ $? -ne 0 ]]; then
        echo -e "\nFailed to attach to RHDN."
        exit 1
      else
        # Enable CodeReady Builder
        /usr/bin/crb enable
        # Add EPEL
        echo -e "\nInstalling additional repos\n"
        dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
        curl -fsSL https://cli.github.com/packages/rpm/gh-cli.repo >\
          "/etc/yum.repos.d/github-cli.repo"
        echo
        # Add Docker
        echo -e "\nRegistering docker-ce-stable Repo"
        dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
        # Add Tanzu CLI
        echo -e "\nRegistering Tanzu CLI Repo"
        cp -v /home/vagrant/tanzu-cli.repo /etc/yum.repos.d/tanzu-cli.repo
        echo
        
        # Install Dev Software
        dnf module -y reset maven
        dnf module -y enable maven:3.8
        dnf module -y reset nodejs
        dnf module -y enable nodejs:20
        dnf distro-sync -y

        # Install Container/Additional Software
        dnf install -y podman skopeo podman-docker podman-compose tmux tree \
          git git-lfs rsync gh java-17-openjdk-devel maven nodejs yarnpkg mkisofs isomd5sum

        # Final Software Update 
        dnf update -y
      fi
    fi
    echo -e "\nDone with setup. Rebooting...\n"
  SHELL

  # Enable FIPS
  config.vm.provision "shell", reboot: true, inline: <<-'SHELL'
    echo -e "\nEnabling FIPS\n"
    fips-mode-setup --enable
    echo -e "\nEnabled FIPS.  Rebooting...\n"
  SHELL

  config.vm.provision "shell",  
  env: {
    GITHUBTOKEN: ENV['GITHUBTOKEN']
  }, privileged: false, inline: <<-'SHELL'
   # Create a folder
  mkdir actions-runner && cd actions-runner
  # Download the latest runner package
  curl -o actions-runner-linux-x64-2.322.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.322.0/actions-runner-linux-x64-2.322.0.tar.gz
  # Optional: Validate the hash
  echo "b13b784808359f31bc79b08a191f5f83757852957dd8fe3dbfcc38202ccf5768  actions-runner-linux-x64-2.322.0.tar.gz" | shasum -a 256 -c
  # Extract the installer
  tar xzf ./actions-runner-linux-x64-2.322.0.tar.gz
  
  echo -e "\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo -e "!!!                                                                                  !!!"
  echo -e "!!!       #Create the runner and start the configuration experience:                 !!!"
  echo -e "!!!          config.sh --url https://github.com/AmentumCMS --token $GITHUBTOKEN      !!!"
  echo -e "!!!       # Last step, run it!                                                       !!!"
  echo -e "!!!          run.sh                                                                  !!!"
  echo -e "!!!                                                                                  !!!"
  echo -e "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"
  SHELL
end
